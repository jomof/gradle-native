/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jomof.cxx

import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder

class SimplestVariantsTest {
    @get:Rule val tempFolder = TemporaryFolder()

    private val projectDir by lazy { tempFolder.root }
    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        projectDir.resolve("obj/hello.o.d").delete()
        projectDir.resolve("hello.h").writeText("""
            #if DEBUG
                #define MESSAGE "Hello, World! (DEBUG)\n"
            #else
                #define MESSAGE "Hello, World! (RELEASE)\n"
            #endif
            
        """.trimIndent())
        projectDir.resolve("hello.c").writeText("""
            #include <stdio.h>
            #include "hello.h"
            
            int main() {
               printf(MESSAGE);
               return 0;
            }
            
        """.trimIndent())
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('com.github.jomof.cxx.core') version '0.0.1'
            }
            configurations {
                debug { }
                release { }
            }
            cxx {
                var compile = rule {
                    description = "Building ${'$'}out"
                    depfile = "${'$'}{out}.d"
                    command = "/usr/bin/clang ${'$'}cflags -c ${'$'}in -o ${'$'}out -MD -MF ${'$'}depfile"
                }
                var link = rule {
                    description = "Linking ${'$'}out"
                    command = "/usr/bin/clang ${'$'}in -o ${'$'}out"
                 }
                for (configuration in configurations) {
                    var variant = "${'$'}{configuration.name}"
                    
                    compile {
                        in = "hello.c"
                        out = "obj/${'$'}variant/hello.o"
                        if (variant == "release") {
                            cflags = "-DRELEASE"
                        } else {
                            cflags = "-DDEBUG"
                        }
                    }
                    link {
                        in = "obj/${'$'}variant/hello.o"
                        out = "bin/${'$'}variant/hello"
                    }
                }
            }
            """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("--configuration-cache", "wrapper", "assemble", "clean")
        runner.withProjectDir(projectDir)
        val result = runner.build()
        publishDemo(projectDir, "simplest-variants",
            """
                This project demonstrates a project that can build either debug or
                release versions of an executable.
            """.trimIndent())
    }
}
