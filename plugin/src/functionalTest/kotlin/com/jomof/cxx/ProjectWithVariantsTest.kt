/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jomof.cxx

import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import java.io.File

class ProjectWithVariantsTest {
    @get:Rule val tempFolder = TemporaryFolder()

    private val projectDir by lazy { tempFolder.root }
    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        projectDir.resolve("obj/hello.o.d").delete()
        projectDir.resolve("hello.h").writeText("""
            #define MESSAGE "Hello, World!\n"
            
        """.trimIndent())
        projectDir.resolve("hello.c").writeText("""
            #include <stdio.h>
            #include "hello.h"
            
            int main() {
               printf(MESSAGE);
               return 0;
            }
            
        """.trimIndent())
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('com.github.jomof.cxx.core') version '0.0.1'
            }
            configurations {
                debug { }
                release { }
            }
            cxx {
                var compile = rule {
                    description = "Building ${'$'}out"
                    depfile = "${'$'}{out}.d"
                    command = "clang ${'$'}cflags -c ${'$'}in -o ${'$'}out -MD -MF ${'$'}depfile"
                }
                var link = rule {
                    description = "Linking ${'$'}out"
                    command = "clang ${'$'}in -o ${'$'}out"
                 }
                for (configuration in configurations) {
                    for(int i = 0; i<5; i++) {
                        var variant = "${'$'}{configuration.name}${'$'}i"
                        compile {
                            in = "hello.c"
                            out = "obj/${'$'}variant/hello.o"
                            cflags = "-Weverything"
                        }
                        link {
                            in = "obj/${'$'}variant/hello.o"
                            out = "bin/${'$'}variant/hello"
                        }
                    }
                }
            }
            """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("--configuration-cache", "wrapper", "assemble", "clean")
        runner.withProjectDir(projectDir)
        val result = runner.build()
        println("$projectDir")
        println("")
        val localRepo = File("../local-plugin-repository").absolutePath
        settingsFile.writeText("""
            pluginManagement {
                repositories {
                    maven { url '$localRepo' }
                    mavenCentral()
                    gradlePluginPortal()
                }
            }
        """.trimIndent())
        val localCopy = File("../demo/simplest-variants").absoluteFile.canonicalFile
        println("Publishing to $localCopy")
        localCopy.deleteRecursively()
        localCopy.mkdirs()
        projectDir.copyRecursively(localCopy)
        localCopy.resolve("bin").deleteRecursively()
        localCopy.resolve("obj").deleteRecursively()
    }
}
