/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jomof.cxx

import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder

class AgpConsumingCxxTest {
    @get:Rule val tempFolder = TemporaryFolder()

    private val projectDir by lazy { tempFolder.root }
    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val appDir by lazy { projectDir.resolve("app") }
    private val libDir by lazy { projectDir.resolve("lib") }
    private val appBuildFile by lazy { appDir.resolve("build.gradle") }
    private val libBuildFile by lazy { libDir.resolve("build.gradle") }
    private val appManifestFile by lazy { appDir.resolve("src/main/AndroidManifest.xml") }
    private val appCMakeListsFile by lazy { appDir.resolve("src/main/cpp/CMakeLists.txt") }
    private val appNativeLibFile by lazy { appDir.resolve("src/main/cpp/native-lib.cpp") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        appDir.mkdirs()
        libDir.mkdirs()
        appManifestFile.parentFile.mkdirs()
        appCMakeListsFile.parentFile.mkdirs()

        appCMakeListsFile.writeText("""
            cmake_minimum_required(VERSION 3.18.1)
            project("myapplication")
            add_library(myapplication SHARED native-lib.cpp)
            find_library(log-lib log)
            target_link_libraries(myapplication ${'$'}{log-lib})
        """.trimIndent())

        appManifestFile.writeText("""
            <?xml version="1.0" encoding="utf-8"?>
            <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                xmlns:tools="http://schemas.android.com/tools">

                <application
                    android:allowBackup="true"
                    android:dataExtractionRules="@xml/data_extraction_rules"
                    android:fullBackupContent="@xml/backup_rules"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:roundIcon="@mipmap/ic_launcher_round"
                    android:supportsRtl="true"
                    android:theme="@style/Theme.MyApplication"
                    tools:targetApi="31">
                    <activity
                        android:name=".MainActivity"
                        android:exported="true">
                        <intent-filter>
                            <action android:name="android.intent.action.MAIN" />

                            <category android:name="android.intent.category.LAUNCHER" />
                        </intent-filter>

                        <meta-data
                            android:name="android.app.lib_name"
                            android:value="" />
                    </activity>
                </application>

            </manifest>
        """.trimIndent())

        libDir.resolve("message.h").writeText("""
            const char * message();
            
        """.trimIndent())
        libDir.resolve("message.c").writeText("""
            const char * message() {
                return "Hello, World!\n";
            }
            
        """.trimIndent())
        appNativeLibFile.writeText("""
            #include <stdio.h>
            #include "message.h"
            
            int main() {
               printf("%s", message());
               return 0;
            }
            
        """.trimIndent())
        settingsFile.writeText("""
            pluginManagement {
                repositories {
                    google()
                    mavenCentral()
                }
            }
            dependencyResolutionManagement {
                repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
                repositories {
                    google()
                    mavenCentral()
                }
            }
            include ':lib'
            include ':app'
        """.trimIndent())
        buildFile.writeText("""
            plugins {
                id 'com.github.jomof.cxx.core' version '0.0.1' apply false
                id 'com.android.application' version '7.4.0-alpha09' apply false
                id 'com.android.library' version '7.4.0-alpha09' apply false
                id 'org.jetbrains.kotlin.android' version '1.7.10' apply false
            }

            """.trimIndent())
        appBuildFile.writeText("""
            plugins {
                id 'com.android.application'
                id 'org.jetbrains.kotlin.android'
            }
            
            android {
                namespace 'com.example.myapplication'
                compileSdk 32
            
                defaultConfig {
                    applicationId "com.example.myapplication"
                    minSdk 24
                    targetSdk 32
                    versionCode 1
                    versionName "1.0"
            
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }
            
                buildTypes {
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                kotlinOptions {
                    jvmTarget = '1.8'
                }
                externalNativeBuild {
                    cmake {
                        path file('src/main/cpp/CMakeLists.txt')
                        version '3.18.1'
                    }
                }
                buildFeatures {
                    viewBinding true
                    prefab true
                }
            }
            
            dependencies {
                implementation project(":lib")
//                implementation 'androidx.core:core-ktx:1.7.0'
//                implementation 'androidx.appcompat:appcompat:1.5.0'
//                implementation 'com.google.android.material:material:1.6.1'
//                implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
//                testImplementation 'junit:junit:4.13.2'
//                androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//                androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
            }

            """.trimIndent())

        libBuildFile.writeText("""
            plugins {
                id('com.github.jomof.cxx.core')
            }
            cxx {
                var compile = rule {
                    description = "Building ${'$'}out"
                    depfile = "${'$'}{out}.d"
                    command = "/usr/bin/clang ${'$'}cflags -c ${'$'}in -o ${'$'}out -MD -MF ${'$'}depfile"
                }
                var linkShared = rule {
                    description = "Linking Shared Library ${'$'}out"
                    command = "/usr/bin/clang ${'$'}in -o ${'$'}out -shared"
                }
                compile {
                    in = "message.c"
                    out = "obj/message.o"
                }
                linkShared {
                    in = "obj/message.o"
                    out = "bin/message.so"
                }
            }
            configurations {
                debug {
                    canBeConsumed = true
                    canBeResolved = false
                    attributes {
                        attribute(com.android.build.api.attributes.AgpVersionAttr.ATTRIBUTE, 
                            objects.named(com.android.build.api.attributes.AgpVersionAttr, "7.4.0-alpha09"))    
                        attribute(com.android.build.api.attributes.BuildTypeAttr.ATTRIBUTE, 
                            objects.named(com.android.build.api.attributes.BuildTypeAttr, "debug"))    
                    }
                }
                release {
                    canBeConsumed = true
                    canBeResolved = false
                    attributes {
                        attribute(com.android.build.api.attributes.AgpVersionAttr.ATTRIBUTE, 
                            objects.named(com.android.build.api.attributes.AgpVersionAttr, "7.4.0-alpha09"))    
                        attribute(com.android.build.api.attributes.BuildTypeAttr.ATTRIBUTE, 
                            objects.named(com.android.build.api.attributes.BuildTypeAttr, "release"))  
                    }
                }
            }
            artifacts {
                debug(file("bin/message.so")) {
                    builtBy("bin-message.so")
                }
                release(file("bin/message.so")) {
                    builtBy("bin-message.so")
                }
            }
            """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.withEnvironment(mapOf("ANDROID_SDK_ROOT" to "/Users/jomof/Library/Android/sdk"))
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("--stacktrace", "assemble", "clean")
        runner.withProjectDir(projectDir)
        val result = runner.build()
        publishDemo(projectDir, "agp-consuming-cxx",
        """
            TODO
        """.trimIndent())

    }
}
