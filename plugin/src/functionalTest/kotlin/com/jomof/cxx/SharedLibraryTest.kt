/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jomof.cxx

import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder

class SharedLibraryTest {
    @get:Rule val tempFolder = TemporaryFolder()

    private val projectDir by lazy { tempFolder.root }
    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        projectDir.resolve("lib").mkdirs()
        projectDir.resolve("app").mkdirs()
        projectDir.resolve("lib/message.h").writeText("""
            const char * message();
            
        """.trimIndent())
        projectDir.resolve("lib/message.c").writeText("""
            const char * message() {
                return "Hello, World!\n";
            }
            
        """.trimIndent())
        projectDir.resolve("app/hello.c").writeText("""
            #include <stdio.h>
            #include "message.h"
            
            int main() {
               printf("%s", message());
               return 0;
            }
            
        """.trimIndent())
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('com.github.jomof.cxx.core') version '0.0.1'
            }
            cxx {
                var compile = rule {
                    description = "Building ${'$'}out"
                    depfile = "${'$'}{out}.d"
                    command = [
                        "/usr/bin/clang", cflags,
                        "-c", in,
                        "-o", out,
                        "-MD -MF", depfile ]
                }
                var linkShared = rule {
                    description = "Linking Shared Library ${'$'}out"
                    command = "/usr/bin/clang ${'$'}in -o ${'$'}out -shared"
                }
                var linkExe = rule {
                    description = "Linking Executable ${'$'}out"
                    command = "/usr/bin/clang ${'$'}in -o ${'$'}out"
                 }
                compile {
                    in = "app/hello.c"
                    out = "obj/hello.o"
                    cflags = "-Ilib"
                }
                compile {
                    in = "lib/message.c" 
                    out = "obj/message.o"
                }
                linkShared {
                    in = "obj/message.o"
                    out = "bin/message.so"
                }
                linkExe {
                    in = ["obj/hello.o", "bin/message.so"]
                    out = "bin/hello"
                }
            }
            """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("--stacktrace", "--configuration-cache", "wrapper", "bin-hello", "clean")
        runner.withProjectDir(projectDir)
        val result = runner.build()
        publishDemo(projectDir, "shared-library",
        """
            This project demonstrates how to build an executable that depends on a shared
            library within the same Gradle module.
        """.trimIndent())

    }
}
