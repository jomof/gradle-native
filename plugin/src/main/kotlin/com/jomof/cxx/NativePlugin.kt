/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jomof.cxx

import org.gradle.api.Project
import org.gradle.api.Plugin

/**
 * A simple 'hello world' plugin.
 */
class NativePlugin: Plugin<Project> {
    override fun apply(project: Project) {
        val cxx = project.extensions.create("cxx", NativePluginExtension::class.java)
        project.afterEvaluate {
            val outputs = mutableMapOf<String, String>()

            cxx.buildRules.forEach { (taskName, ruleScope) ->
                if (outputs.containsKey(ruleScope.output)) {
                    error("Output ${ruleScope.output} is already produced by ${outputs.getValue(ruleScope.output)}")
                }
                outputs[ruleScope.output] = taskName
            }

            var buffer = intArrayOf()

            cxx.buildRules.forEach { (taskName, ruleScope) ->
                project.tasks.register(
                    taskName,
                    BuildTask::class.java
                ) { task ->
                    task.description = ruleScope.description
                    if (buffer.size < minimumSizeOfTokenizeCommandLineBuffer(ruleScope.command)) {
                        buffer = allocateTokenizeCommandLineBuffer(ruleScope.command)
                    }
                    val tokens = TokenizedCommandLine(
                        commandLine = ruleScope.command,
                        raw = true,
                        indexes = buffer
                    )
                    task.parameters.set(
                        BuildCommandParameters(
                            inputs = project.files(ruleScope.inputs),
                            output = project.file(ruleScope.output),
                            command = tokens.toTokenList()
                        )
                    )
                    ruleScope.inputs.forEach { input ->
                        val producer = outputs[input]
                        if (producer != null) {
                            task.dependsOn(producer)
                        } else {
                            if (!project.file(input).isFile) {
                                error("Input $input did not exist")
                            }
                        }
                    }
                }
            }
        }

    }
}



